#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 >;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 21>;
        };

        hrdsgn {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
        };

        cmd_z {
            bindings = <&kp LG(Z)>;
            key-positions = <22 24>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <22 20>;
        };

        x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <34 29>;
        };

        ru_comma {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <26 27>;
        };

        ru_dot {
            bindings = <&kp LS(N7)>;
            key-positions = <27 28>;
        };

        ru_hard_mark {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <25 26>;
        };
    };

    macros {
        ru_layout: ru_layout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>, <&macro_wait_time 20>, <&to 1>;

            label = "RU_LAYOUT";
        };

        en_layout: en_layout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>, <&macro_wait_time 20>, <&to 0>;

            label = "EN_LAYOUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &lt 4 W       &lt 3 F      &lt 2 P       &kp B                           &kp J      &lt 2 L       &lt 3 U      &kp Y         &kp EQUAL
  &hml LALT A  &hml LCTRL R  &hml LCMD S  &hml LSHFT T  &kp G                           &kp M      &hmr LSHFT N  &hmr LGUI E  &hmr LCTRL I  &kp O
  &kp X        &kp C         &kp D        &kp V         &kp Z                           &kp K      &kp H         &kp COMMA    &kp DOT       &kp APOS
                                          &kp ENTER     &kp TAB  &kp ESC    &ru_layout  &kp SPACE  &kp BSPC
            >;
        };

        ru {
            bindings = <
  &kp Q        &lt 4 W       &lt 3 E      &lt 2 R       &kp T                           &kp Y      &lt 2 U       &lt 3 I      &kp O         &kp P
  &hml LALT A  &hml LCTRL S  &hml LCMD D  &hml LSHFT F  &kp G                           &kp H      &hmr LSHFT J  &hmr LGUI K  &hmr LCTRL L  &kp SEMICOLON
  &kp Z        &kp X         &kp C        &kp V         &kp B                           &kp N      &kp M         &kp COMMA    &kp DOT       &kp SQT
                                          &kp ENTER     &kp TAB  &kp ESC    &en_layout  &kp SPACE  &kp BSPC
            >;
        };

        nav {
            bindings = <
  &none     &none     &kp UP_ARROW                       &none      &none                           &none      &kp N7        &kp N8        &kp N9        &none
  &kp LALT  &kp LEFT  &mt LA(LS(DOWN_ARROW)) DOWN_ARROW  &kp RIGHT  &none                           &none      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0
  &none     &none     &none                              &none      &kp DELETE                      &none      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none
                                                         &kp ENTER  &kp LGUI    &kp ESC    &kp ESC  &kp LSHFT  &kp BSPC
            >;
        };

        sym {
            bindings = <
  &none  &kp HASH      &kp COLON  &kp AT_SIGN  &kp AMPERSAND                    &kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp UNDER  &kp RIGHT_PARENTHESIS  &none
  &none  &kp ASTERISK  &kp LSHFT  &kp PERCENT  &kp SQT                          &kp PIPE              &kp LEFT_BRACKET      &kp MINUS  &kp RIGHT_BRACKET      &kp EXCLAMATION
  &none  &kp LCTRL     &kp GRAVE  &kp DOLLAR   &none                            &kp SLASH             &kp LEFT_BRACE        &kp TILDE  &kp RIGHT_BRACE        &kp QUESTION
                                  &kp ENTER    &kp TAB        &trans    &trans  &kp SPACE             &kp BSPC
            >;
        };

        adj {
            bindings = <
  &none  &none  &kp LC(LEFT)  &kp LC(RIGHT)         &none                                &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &none  &none  &none         &kp LS(LG(NUMBER_4))  &none                                &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &none  &none  &none         &kp LS(LG(N5))        &none                                &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                              &kp LA(LG(LEFT))      &kp LA(LG(RIGHT))  &trans    &trans  &trans        &trans
            >;
        };
    };
};
